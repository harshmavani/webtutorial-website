<!DOCTYPE html>
	<html lang="en">
	<head>
	  <meta name="description" content="How to Create, Access and Destroy Sessions in PHP">
	  <meta name="keywords" content="php,php basic,How to Create, Access and Destroy Sessions in PHP">
	  <meta name="author" content="webschooltoday.com">
    <title>How to Create, Access and Destroy Sessions in PHP - WebSchool Today</title>
	<meta name="description" content="In this tutorial you will learn how to use PHP sessions to temporarily store sensitive information on the server." />
 <?php include "../links.php" ?></head>
<body>
<div>
<div class="tital">How to Create, Access and Destroy Sessions in PHP</div>    
<?php include "../head_part.php" ?> 


    <div class="rg3-w clearfix"> 

<?php include "des_php.php" ?>
        <div class="rg3-sec_main">
            <div class="rg3-sec_u">
                <div class="rg3-sec_i">
                    
</div>
<a href="bp_send-email.php" class="next-page" title="Go to Next Page"><i class="fa fa-arrow-right" aria-hidden="true"></i></a>

                <a href="bp_cookies.php" class="previous-page" title="Go to Previous Page"><i class="fa fa-arrow-left" aria-hidden="true"></i></a>
                <h1>PHP <span>Sessions</span></h1>
                <p class="summary">In this tutorial you will learn how to store certain data on the server on a temporary basis using PHP session.</p>
                <h2>What is a Session</h2>
                <p>Although you can store data using cookies but it has some security issues. Since cookies are stored on user's computer it is possible for an attacker to easily modify a cookie content to insert potentially harmful data in your application that might break your application.</p>
                <p>Also every time the browser requests a URL to the server, all the cookie data for a website is automatically sent to the server within the request. It means if you have stored 5 cookies on user's system, each having 4KB in size, the browser needs to upload 20KB of data each time the user views a page, which can affect your site's performance.</p>
                <p>You can solve both of these issues by using the PHP session. A PHP session stores data on the server rather than user's computer. In a session based environment, every user is identified through a unique number called session identifier or SID. This unique session ID is used to link each user with their own information on the server like emails, posts, etc.</p>
                <div class="color-box space">
                    <div class="shadow">
                    <div class="info-tab tip-icon" title="Useful Tips"><i></i></div>
                        <div class="tip-box"   style="background-color:#fad28c">
                            <p><strong>Important:</strong> The session IDs are randomly generated by the PHP engine which is almost impossible to guess. Furthermore, because the session data is stored on the server, it doesn't have to be sent with every browser request.</p>
                        </div>
                    </div>
                </div>
                <h2>Starting a PHP Session</h2>
                <p>Before you can store any information in session variables, you must first start up the session. To begin a new session, simply call the PHP <code>session_start()</code> function. It will create a new session and generate a unique session ID for the user.</p>
                <p>The PHP code in the example below simply starts a new session.</p>
                <div class="example">
                    <div class="my_codeb">
                        <div class="my_codeb-title"><h4>Example</h4><a href="../output_file/bin/start-a-new-session76b9.php" target="_top" class="download-btn" title="Download Source Code"><span>Download</span></a></div>
                        <textarea id="code1">

&lt;?php
// Starting session
session_start();
?&gt;

 </textarea>
	                            <script>
								var editor = CodeMirror.fromTextArea(document.getElementById("code1"), {
									mode: "text/html",
									tabMode: "indent",
									styleActiveLine: true,
									lineNumbers: true,
									lineWrapping: true
								});

							</script>                    </div>
                </div>
                <p>The <code>session_start()</code> function first checks to see if a session already exists by looking for the presence of a session ID. If it finds one, i.e. if the session is already started, it sets up the session variables and if doesn't, it starts a new session by creating a new session ID.</p>
                <div class="color-box">
                    <div class="shadow">
                        <div class="info-tab note-icon" title="Important Notes"><i></i></div>
                        <div class="note-box"  style="background-color:#ff8585"
>
                            <p><strong>Read Carefully:</strong> You must call the <code>session_start()</code> function at the beginning of the page i.e. before any output generated by your script in the browser, much like you do while setting the cookies with <code>setcookie()</code> function.</p>
                        </div>
                    </div>
                </div>
                <hr />
                <h2>Storing and Accessing Session Data</h2>
                <p>You can store all your session data as key-value pairs in the <code>$_SESSION[]</code> superglobal array. The stored data can be accessed during lifetime of a session.
        Consider the following script, which creates a new session and registers two session variables.</p>
                <div class="example">
                    <div class="my_codeb">
                        <div class="my_codeb-title"><h4>Example</h4><a href="../output_file/bin/store-data-in-a-session633b.php" target="_top" class="download-btn" title="Download Source Code"><span>Download</span></a></div>
                        <textarea id="code2">

&lt;?php
// Starting session
session_start();
 
// Storing session data
$_SESSION["firstname"] = "Peter";
$_SESSION["lastname"] = "Parker";
?&gt;

 </textarea>
	                            <script>
								var editor = CodeMirror.fromTextArea(document.getElementById("code2"), {
									mode: "text/html",
									tabMode: "indent",
									styleActiveLine: true,
									lineNumbers: true,
									lineWrapping: true
								});

							</script>                    </div>
                </div>
                <p>To access the session data we set on our previous example from any other page on the same web domain &mdash; simply recreate the session by calling <code>session_start()</code> and then pass the corresponding key to the <code>$_SESSION</code> associative array.</p>
                <div class="example">
                    <div class="my_codeb">
                        <div class="my_codeb-title"><h4>Example</h4><a href="../output_file/bin/access-session-data1ad7.php" target="_top" class="download-btn" title="Download Source Code"><span>Download</span></a></div>
                        <textarea id="code3">

&lt;?php
// Starting session
session_start();
 
// Accessing session data
echo 'Hi, ' . $_SESSION["firstname"] . ' ' . $_SESSION["lastname"];
?&gt;

 </textarea>
	                            <script>
								var editor = CodeMirror.fromTextArea(document.getElementById("code3"), {
									mode: "text/html",
									tabMode: "indent",
									styleActiveLine: true,
									lineNumbers: true,
									lineWrapping: true
								});

							</script>
                    </div>
                </div>
                <p>The PHP code in the example above produce the following output.</p>
                <div class="output-box">
                    Hi, Peter Parker
                </div>
                <div class="color-box">
                    <div class="shadow">
                        <div class="info-tab note-icon" title="Important Notes"><i></i></div>
                        <div class="note-box" style="background-color:#ff8585">
                            <p><strong>Read Carefully:</strong> To access the session data in the same page there is no need to recreate the session since it has been already started on the top of the page.</p>
                        </div>
                    </div>
                </div>
                <hr />
                <h2>Destroying a Session</h2>
                <p>If you want to remove certain session data, simply unset the corresponding key of the <code>$_SESSION</code> associative array, as shown in the following example:</p>
                <div class="example">
                    <div class="my_codeb">
                        <div class="my_codeb-title"><h4>Example</h4><a href="../output_file/bin/destroy-session-data7469.php" target="_top" class="download-btn" title="Download Source Code"><span>Download</span></a></div>
                        <textarea id="code4">

&lt;?php
// Starting session
session_start();
 
// Removing session data
if(isset($_SESSION["lastname"])){
    unset($_SESSION["lastname"]);
}
?&gt;

 </textarea>
	                            <script>
								var editor = CodeMirror.fromTextArea(document.getElementById("code4"), {
									mode: "text/html",
									tabMode: "indent",
									styleActiveLine: true,
									lineNumbers: true,
									lineWrapping: true
								});

							</script>                    </div>
                </div>
                <p>However, to destroy a session completely, simply call the <code>session_destroy()</code> function. This function does not need any argument and a single call destroys all the session data.</p>
                <div class="example">
                    <div class="my_codeb">
                        <div class="my_codeb-title"><h4>Example</h4><a href="../output_file/bin/destroy-a-sessionb47e.php" target="_top" class="download-btn" title="Download Source Code"><span>Download</span></a></div>
                        <textarea id="code5">

&lt;?php
// Starting session
session_start();
 
// Destroying session
session_destroy();
?&gt;

 </textarea>
	                            <script>
								var editor = CodeMirror.fromTextArea(document.getElementById("code5"), {
									mode: "text/html",
									tabMode: "indent",
									styleActiveLine: true,
									lineNumbers: true,
									lineWrapping: true
								});

							</script>                    </div>
                </div>
                <div class="color-box break">
                    <div class="shadow">
                        <div class="info-tab note-icon" title="Important Notes"><i></i></div>
                        <div class="note-box"  style="background-color:#ff8585"
>
                            <p><strong>Read Carefully:</strong> Before destroying a session with the <code>session_destroy()</code> function, you need to first recreate the session environment if it is not already there using the <code>session_start()</code> function, so that there is something to destroy.</p>
                        </div>
                    </div>
                </div>
                <p>Every PHP session has a timeout value &mdash; a duration, measured in seconds &mdash; which determines how long a session should remain alive in the absence of any user activity. You can adjust this timeout duration by changing the value of <code>session.gc_maxlifetime</code> variable in the PHP configuration file (<code>php.ini</code>).</p>
                <div class="bottom-link clearfix">
                    <a href="bp_cookies.php" class="previous-page-bottom"><i class="fa fa-arrow-left" aria-hidden="true"></i> Previous</a>
                    <a href="bp_send-email.php" class="next-page-bottom" style="float: right;">Next <i class="fa fa-arrow-right" aria-hidden="true"></i></a>
                    </div>
            </div>
        </div>        
        <div class="sidebar">
            
        </div>
    </div> 
</div>
	<?php include "../footer.php" ?>

</body>
</html>