<!DOCTYPE html>
	<html lang="en">
	<head>
	  <meta name="description" content="PHP Error Handling and Logging">
	  <meta name="keywords" content="php,php basic,PHP Error Handling and Logging">
	  <meta name="author" content="webschooltoday.com">
    <title>PHP Error Handling and Logging - WebSchool Today</title>
 <?php include "../links.php" ?></head>
<body>
<div>
<div class="tital">PHP Error Handling and Logging</div>    
<?php include "../head_part.php" ?> 


    <div class="rg3-w clearfix"> 

<?php include "des_php.php" ?>
        <div class="rg3-sec_main">
            <div class="rg3-sec_u">
                <div class="rg3-sec_i">
                    
</div>
<a href="bp_classes-and-objects.php" class="next-page" title="Go to Next Page"><i class="fa fa-arrow-right" aria-hidden="true"></i></a>

                <a href="bp_filters.php" class="previous-page" title="Go to Previous Page"><i class="fa fa-arrow-left" aria-hidden="true"></i></a>
                <h1>PHP <span>Error Handling</span></h1>
                <p class="summary">In this tutorial you will learn how to use the PHP's error handling functions to deal with the error conditions gracefully.</p>
                <h2>Handling Errors</h2>
                <p>Sometimes your application will not run as it supposed to do, resulting in an error. There are a number of reasons that may cause errors, for example:</p>
                <ul>
                    <li>The Web server might run out of disk space</li>
                    <li>A user might have entered an invalid value in a form field</li>
                    <li>The file or database record that you were trying to access may not exist</li>
                    <li>The application might not have permission to write to a file on the disk</li>
                    <li>A service that the application needs to access might be temporarily unavailable</li>
                </ul>
                <p>These types of errors are known as runtime errors, because they occur at the time the script runs. They are distinct from syntax errors that need to be fixed before the script will run.</p>
                <p class="space">A professional application must have the capabilities to handle such runtime error gracefully. Usually this means informing the user about the problem more clearly and precisely.</p>
                <h2>Understanding Error Levels</h2>
                <p>Usually, when there's a problem that prevents a script from running properly, the PHP engine triggers an error. Each error is represented by an integer value and an associated constant. The following table list some of the common error levels:</p>
                <div class="shadow">
                    <table class="data">
                        <tr>
                            <th>Error Level</th>
                            <th>Value</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td><code>E_ERROR</code></td>
                            <td><code>1</code></td>
                            <td>A fatal run-time error, that can't be recovered from. The execution of the script is stopped immediately.</td>
                        </tr>
                        <tr>
                            <td><code>E_WARNING</code></td>
                            <td><code>2</code></td>
                            <td>A run-time warning. It is non-fatal and most errors tend to fall into this category. The execution of the script is not stopped.</td>
                        </tr>
                        <tr>
                            <td><code>E_NOTICE</code></td>
                            <td><code>8</code></td>
                            <td>A run-time notice. Indicate that the script encountered something that could possibly an error, although the situation could also occur when running a script normally.</td>
                        </tr>
                        <tr>
                            <td><code>E_USER_ERROR</code></td>
                            <td><code>256</code></td>
                            <td>A fatal user-generated error message. This is like an <code>E_ERROR</code>, except it is generated by the PHP script using the function <code>trigger_error()</code> rather than the PHP engine.</td>
                        </tr>
                        <tr>
                            <td><code>E_USER_WARNING</code></td>
                            <td><code>512</code></td>
                            <td>A non-fatal user-generated warning message. This is like an <code>E_WARNING</code>, except it is generated by the PHP script using the function <code>trigger_error()</code> rather than the PHP. engine</td>
                        </tr>
                        <tr>
                            <td><code>E_USER_NOTICE</code></td>
                            <td><code>1024</code></td>
                            <td>A user-generated notice message. This is like an <code>E_NOTICE</code>, except it is generated by the PHP script using the function <code>trigger_error()</code> rather than the PHP engine.</td>
                        </tr>
                        <tr>
                            <td><code>E_STRICT</code></td>
                            <td><code>2048</code></td>
                            <td>Not strictly an error, but triggered whenever PHP encounters code that could lead to problems or forward incompatibilities</td>
                        </tr>
                        <tr>
                            <td><code>E_ALL</code></td>
                            <td><code>8191</code></td>
                            <td>All errors and warnings, except of <code>E_STRICT</code> prior to PHP 5.4.0.</td>
                        </tr>
                    </table>
                </div>
                <p>For more error levels, please check out the reference on <a href="../bp_reference/bp_error-levels.php">PHP Error Levels</a>.</p>
                <p class="space">The PHP engine triggers an error whenever it encounters a problem with your script, but you can also trigger errors yourself to generate more user friendly error messages. This way you can make your application more sofisticated. The following section describes some of common methods used for handling errors in PHP:</p>
                <h2>Basic Error Handling Using the <code>die()</code> Function</h2>
                <p>Consider the following example that simply tries to open a text file for reading only.</p>
                <div class="example">
                    <div class="my_codeb">
                        <div class="my_codeb-title"><h4>Example</h4><a href="../output_file/bin/open-non-existent-file5ac1.php" target="_top" class="download-btn" title="Download Source Code"><span>Download</span></a></div>
                        <textarea id="code1">

&lt;?php
// Try to open a non-existent file
$file = fopen("sample.txt", "r");
?&gt;

 </textarea>
	                            <script>
								var editor = CodeMirror.fromTextArea(document.getElementById("code1"), {
									mode: "text/html",
									tabMode: "indent",
									styleActiveLine: true,
									lineNumbers: true,
									lineWrapping: true
								});

							</script>                    </div>
                </div>
                <p>If the file does not exist you might get an error like this:</p>
                <div class="output-box">
                    Warning: fopen(sample.txt) [function.fopen]: failed to open stream: No such file or directory in C:\wamp\www\project\test.php on line 2
                </div>
                <p>If we follow some simple steps we can prevent the users from getting such error message.</p>
                <div class="example">
                    <div class="my_codeb">
                        <div class="my_codeb-title"><h4>Example</h4><a href="../output_file/bin/basic-error-handling9f5b.php" target="_top" class="download-btn" title="Download Source Code"><span>Download</span></a></div>
                        <textarea id="code2">

&lt;?php
if(file_exists("sample.txt")){
    $file = fopen("sample.txt", "r");
} else{
    die("Error: The file you are trying to access doesn't exist.");
}
?&gt;

 </textarea>
	                            <script>
								var editor = CodeMirror.fromTextArea(document.getElementById("code2"), {
									mode: "text/html",
									tabMode: "indent",
									styleActiveLine: true,
									lineNumbers: true,
									lineWrapping: true
								});

							</script>                    </div>
                </div>
                <p>Now if you run the above script you will get the error message like this:</p>
                <div class="output-box">
                    Error: The file you are trying to access doesn't exist.
                </div>
                <p>As you can see by implementing a simple check whether the file exist or not before trying to access it, we can generate an error message that is more meaningful to the user.</p>
                <p>The <code>die()</code> function used above simply display the custom error message and terminate the current script if 'sample.txt' file is not found.</p>
                <hr />
                <h2>Creating a Custom Error Handler</h2>
                <p>You can create your own error handler function to deal with the run-time error generated by PHP engine. The custom error handler provides you greater flexibility and better control over the errors, it can inspect the error and decide what to do with the error, it might display a message to the user, log the error in a file or database or send by e-mail, attempt to fix the problem and carry on, exit the execution of the script or ignore the error altogether.</p>
                <p>The custom error handler function must be able to handle at least two parameters (errno and errstr), however it can optionally accept an additional three parameters (errfile, errline, and errcontext), as described below:</p>
                <div class="shadow">
                    <table class="data">
                        <tr>
                            <th style="width: 90px;">Parameter</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td class="section" colspan="2"><strong>Required</strong> &mdash; The following parameters are required</td>
                        </tr>
                        <tr>
                            <td>errno</td>
                            <td>Specifies the level of the error, as an integer. This corresponds to the appropriate error level constant ( <code>E_ERROR</code>, <code>E_WARNING</code>, and so on)</td>
                        </tr>
                        <tr>
                            <td>errstr</td>
                            <td>Specifies the error message as a string</td>
                        </tr>
                        <tr>
                            <td class="section" colspan="2"><strong>Optional</strong> &mdash; The following parameters are optional</td>
                        </tr>
                        <tr>
                            <td>errfile</td>
                            <td>Specifies the filename of the script file in which the error occurred, as a string</td>
                        </tr>
                        <tr>
                            <td>errline</td>
                            <td>Specifies the line number on which the error occurred, as a string</td>
                        </tr>
                        <tr>
                            <td>errcontext</td>
                            <td>Specifies an array containing all the variables and their values that existed at the time the error occurred. Useful for debugging</td>
                        </tr>
                    </table>
                </div>
                <p>Here's an example of a simple custom error handling function. This handler, <code>customError()</code> is triggered whenever an error occurred, no matter how trivial. It then outputs the details of the error to the browser and stops the execution of the script.</p>
                <div class="example">
                    <div class="my_codeb">
                        <div class="my_codeb-title"><h4>Example</h4><a href="../output_file/bin/custom-error-handlera9ec.php" target="_top" class="download-btn" title="Download Source Code"><span>Download</span></a></div>
                        <textarea id="code3">

&lt;?php
// Error handler function
function customError($errno, $errstr){
    echo "&lt;b&gt;Error:&lt;/b&gt; [$errno] $errstr";
}
?&gt;

 </textarea>
	                            <script>
								var editor = CodeMirror.fromTextArea(document.getElementById("code3"), {
									mode: "text/html",
									tabMode: "indent",
									styleActiveLine: true,
									lineNumbers: true,
									lineWrapping: true
								});

							</script>                    </div>
                </div>
                <p>You need to tell the PHP to use your custom error handler function &mdash; just call the built-in <code>set_error_handler()</code> function, passing in the name of the function.</p>
                <div class="example">
                    <div class="my_codeb">
                        <div class="my_codeb-title"><h4>Example</h4><a href="../output_file/bin/set-custom-error-handlerac6a.php" target="_top" class="download-btn" title="Download Source Code"><span>Download</span></a></div>
                        <textarea id="code4">

&lt;?php
// Error handler function
function customError($errno, $errstr){
    echo "&lt;b&gt;Error:&lt;/b&gt; [$errno] $errstr";
}
 
// Set error handler
set_error_handler("customError");
 
// Trigger error
echo($test);
?&gt;

 </textarea>
	                            <script>
								var editor = CodeMirror.fromTextArea(document.getElementById("code4"), {
									mode: "text/html",
									tabMode: "indent",
									styleActiveLine: true,
									lineNumbers: true,
									lineWrapping: true
								});

							</script>                    </div>
                </div>
                <hr />
                <h2>Error Logging</h2>
                <h3>Log Error Messages in a Text File</h3>
                <p>You can also logs details of the error to the log file, like this:</p>
                <div class="example">
                    <div class="my_codeb">
                        <div class="my_codeb-title"><h4>Example</h4><a href="../output_file/bin/log-errors-in-a-text-filed62a.php" target="_top" class="download-btn" title="Download Source Code"><span>Download</span></a></div>
                        <pre class="syntax-highlighter line-numbers"><code class="language-php"></code></pre>
                    </div>
                </div>
                <!--End:Code box-->
                <h3>Send Error Messages by E-Mail</h3>
                <p>You can also send e-mail with the error details using the same <code>error_log()</code> function.</p>
                <!--Code box-->
                <div class="example">
                    <div class="my_codeb">
                        <div class="my_codeb-title"><h4>Example</h4><a href="../output_file/bin/log-errors-by-email0834.php" target="_top" class="download-btn" title="Download Source Code"><span>Download</span></a></div>
                        <textarea id="code5">

&lt;?php
function calcDivision($dividend, $divisor){
    if($divisor == 0){
        trigger_error("calcDivision(): The divisor cannot be zero", E_USER_WARNING);
        return false;
    } else{
        return($dividend / $divisor);
    }
}
function customError($errno, $errstr, $errfile, $errline, $errcontext){
    $message = date("Y-m-d H:i:s - ");
    $message .= "Error: [" . $errno ."], " . "$errstr in $errfile on line $errline, ";
    $message .= "Variables:" . print_r($errcontext, true) . "\r\n";
    
    error_log($message, 3, "logs/app_errors.log");
    die("There was a problem, please try again.");
}
set_error_handler("customError");
echo calcDivision(10, 0);
echo "This will never be printed.";
?&gt;

 </textarea>
	                            <script>
								var editor = CodeMirror.fromTextArea(document.getElementById("code5"), {
									mode: "text/html",
									tabMode: "indent",
									styleActiveLine: true,
									lineNumbers: true,
									lineWrapping: true
								});

							</script>
                    </div>
                </div>
                <hr />
                <h2>Trigger an Error</h2>
                <p>Although the PHP engine triggers an error whenever it encounters a problem with your script, however you can also trigger errors yourself. This can help to make your application more robust, because it can flag potential problems before they turn into serious errors.</p>
                <p>To trigger an error from within your script, call the <code>trigger_error()</code> function, passing in the error message that you want to generate:</p>
                <div class="shadow">
                    <div class="syntax"><span class="function">trigger_error</span>("There was a problem.");</div>
                </div>
                <p>Consider the following function that calculates division of the two numbers.</p>
                <div class="example">
                    <div class="my_codeb">
                        <div class="my_codeb-title"><h4>Example</h4><a href="../output_file/bin/errors-triggered-by-the-bp_engineba7a.php" target="_top" class="download-btn" title="Download Source Code"><span>Download</span></a></div>
                        <textarea id="code6">

&lt;?php
function calcDivision($dividend, $divisor){
    return($dividend / $divisor);
}
 
// Calling the function
echo calcDivision(10, 0);
?&gt;

 </textarea>
	                            <script>
								var editor = CodeMirror.fromTextArea(document.getElementById("code6"), {
									mode: "text/html",
									tabMode: "indent",
									styleActiveLine: true,
									lineNumbers: true,
									lineWrapping: true
								});

							</script>                    </div>
                </div>
                <p>If a value of zero (0) is passed as the <code>$divisor</code> parameter, the error generated by the PHP engine will look something like this:</p>
                <div class="output-box">
                    Warning: Division by zero in C:\wamp\www\project\test.php on line 3
                </div>
                <p>This message doesn't look very informative. Consider the following example that uses the <code>trigger_error()</code> function to generate the error.</p>
                <div class="example">
                    <div class="my_codeb">
                        <div class="my_codeb-title"><h4>Example</h4><a href="../output_file/bin/trigger-errors-yourselfb752.php" target="_top" class="download-btn" title="Download Source Code"><span>Download</span></a></div>
                        <textarea id="code7">

&lt;?php
function calcDivision($dividend, $divisor){
    if($divisor == 0){
        trigger_error("The divisor cannot be zero", E_USER_WARNING);
        return false;
    } else{
        return($dividend / $divisor);
    }
}
 
// Calling the function
echo calcDivision(10, 0);
?&gt;

 </textarea>
	                            <script>
								var editor = CodeMirror.fromTextArea(document.getElementById("code7"), {
									mode: "text/html",
									tabMode: "indent",
									styleActiveLine: true,
									lineNumbers: true,
									lineWrapping: true
								});

							</script>                    </div>
                </div>
                <p>Now the script generates this error message:</p>
                <div class="output-box">
                    Warning: The divisor cannot be zero in C:\wamp\www\project\error.php on line 4                
				</div>
                <p>As you can see the error message generated by the second example explains the problem more clearly as compared to the previous one.</p>
                <div class="bottom-link clearfix">
                    <a href="bp_filters.php" class="previous-page-bottom"><i class="fa fa-arrow-left" aria-hidden="true"></i> Previous</a>
                    <a href="bp_classes-and-objects.php" class="next-page-bottom" style="float: right;">Next <i class="fa fa-arrow-right" aria-hidden="true"></i></a>
                    </div>
            </div>
        </div>        
        <div class="sidebar">
            
        </div>
    </div> 
</div>
	<?php include "../footer.php" ?>

</body>
</html>